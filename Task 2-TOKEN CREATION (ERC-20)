// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/**
 * @title CustomERC20
 * @notice Minimal, self-contained ERC-20 token with Ownable controls and mint/burn features.
 *         No external imports required (so it's easy to paste into Remix or VS Code).
 *
 * Constructor args:
 *  - name_ : token name (e.g., "CodTech Custom Token")
 *  - symbol_: token symbol (e.g., "CCT")
 *  - initialSupplyWholeTokens: initial supply in whole tokens (e.g., 1000000 for 1,000,000 tokens)
 *
 * The constructor mints initial supply to deployer (owner). Owner can mint additional tokens.
 */
contract CustomERC20 {
    // ======== ERC20 state ========
    string public name;
    string public symbol;
    uint8  public immutable decimals = 18;
    uint256 public totalSupply;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    // ======== Ownership ========
    address public owner;

    // ======== Events ========
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed ownerAddr, address indexed spender, uint256 value);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event Mint(address indexed to, uint256 amount);
    event Burn(address indexed from, uint256 amount);

    // ======== Modifiers ========
    modifier onlyOwner() {
        require(msg.sender == owner, "CustomERC20: caller is not the owner");
        _;
    }

    // ======== Constructor ========
    constructor(string memory name_, string memory symbol_, uint256 initialSupplyWholeTokens) {
        name = name_;
        symbol = symbol_;
        owner = msg.sender;

        // Convert whole tokens to smallest units (wei-like)
        uint256 initial = initialSupplyWholeTokens * (10 ** uint256(decimals));
        totalSupply = initial;
        balanceOf[msg.sender] = initial;

        emit Transfer(address(0), msg.sender, initial);
        emit OwnershipTransferred(address(0), msg.sender);
    }

    // ======== Ownership functions ========
    function transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != address(0), "CustomERC20: new owner is zero address");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }

    // ======== ERC20 standard functions ========
    function transfer(address to, uint256 value) external returns (bool) {
        _transfer(msg.sender, to, value);
        return true;
    }

    function approve(address spender, uint256 value) external returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) external returns (bool) {
        uint256 currentAllowance = allowance[from][msg.sender];
        require(currentAllowance >= value, "CustomERC20: transfer amount exceeds allowance");

        // decrease allowance then transfer
        allowance[from][msg.sender] = currentAllowance - value;
        emit Approval(from, msg.sender, allowance[from][msg.sender]);

        _transfer(from, to, value);
        return true;
    }

    // safer allowance helpers
    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {
        _approve(msg.sender, spender, allowance[msg.sender][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {
        uint256 current = allowance[msg.sender][spender];
        if (subtractedValue >= current) {
            _approve(msg.sender, spender, 0);
        } else {
            _approve(msg.sender, spender, current - subtractedValue);
        }
        return true;
    }

    // ======== Mint / Burn (owner controlled) ========
    /// @notice Mint tokens to `to`. Only owner can call.
    function mint(address to, uint256 amountWholeTokens) external onlyOwner {
        require(to != address(0), "CustomERC20: mint to zero address");
        uint256 amount = amountWholeTokens * (10 ** uint256(decimals));
        totalSupply += amount;
        balanceOf[to] += amount;
        emit Mint(to, amount);
        emit Transfer(address(0), to, amount);
    }

    /// @notice Burn tokens from caller balance (reduces totalSupply)
    function burn(uint256 amountWholeTokens) external {
        uint256 amount = amountWholeTokens * (10 ** uint256(decimals));
        require(balanceOf[msg.sender] >= amount, "CustomERC20: burn amount exceeds balance");
        balanceOf[msg.sender] -= amount;
        totalSupply -= amount;
        emit Burn(msg.sender, amount);
        emit Transfer(msg.sender, address(0), amount);
    }

    // ======== Internal helpers ========
    function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0), "CustomERC20: transfer to zero");
        require(balanceOf[from] >= value, "CustomERC20: insufficient balance");

        balanceOf[from] -= value;
        balanceOf[to] += value;

        emit Transfer(from, to, value);
    }

    function _approve(address ownerAddr, address spender, uint256 value) internal {
        require(spender != address(0), "CustomERC20: approve to zero");
        require(ownerAddr != address(0), "CustomERC20: approve from zero");
        allowance[ownerAddr][spender] = value;
        emit Approval(ownerAddr, spender, value);
    }
}
